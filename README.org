#+TITLE: ECM-SPA: A minimal SPA foundation


I've got an application that's turning 20 this
year([2024-01-03 Wed]). It needs a total refactoring. It's a web app.

There may be times when I don't pay attention to it for a while. A
year even. That means minimal dependencies.

And, I'm old school. Keeping things tiny with a foundation, not a
framework, is the goal here.

I want this application to turn 40. Half way there!



* Contents
:PROPERTIES:
:TOC:      :include siblings :depth 3 :ignore (this)
:CUSTOM_ID: contents
:END:
:CONTENTS:
- [[#demo-and-documentation][Demo and Documentation]]
  - [[#indexhtml][Index.html]]
  - [[#mainhtml][main.html]]
  - [[#navbar][Navbar]]
  - [[#components][Components]]
    - [[#dates-and-times][Dates and Times]]
    - [[#auto-select][Auto Select]]
- [[#implementation][Implementation]]
  - [[#pages-in-single-page-the-router][Pages, in single page? The router]]
  - [[#an-ecmspa-object-global-ecm-instance][An EcmSPA object, global ECM instance]]
    - [[#constructor-ecmspa][Constructor EcmSPA]]
    - [[#queryselector-mostly-to-find-data-attributes][.querySelector mostly to find data attributes]]
    - [[#initialize-an-element][Initialize an element]]
    - [[#load-an-element][Load an element]]
    - [[#replaceelement-replace-an-element][replaceElement Replace an element]]
    - [[#loadscript-dynamic-loading-of-javascript-files][.loadScript Dynamic Loading of JavaScript files]]
  - [[#ecmelement-and-the-ecmspadomelements-cache-the-superclass-of-all][EcmElement and the EcmSPA.domElements[] cache: The superclass of all]]
  - [[#ecmdatetime-date-time-and-datetime-local][EcmDateTime: "date". "time" and "datetime-local"]]
    - [[#constructor][Constructor]]
    - [[#the-date-property][The Date property]]
    - [[#parser][Parser]]
    - [[#html][HTML]]
    - [[#input-typedate][<input type="date">]]
  - [[#ecmselect-dropdown-select-search-autocomplete-thing][EcmSelect dropdown select search autocomplete thing]]
    - [[#thisselected-select-option-property][this.selected: Select "option" property]]
    - [[#default-static-select][Default Static Select]]
  - [[#the-css-style][The css style]]
  - [[#the-rest-of-indexjs][The rest of index.js]]
  - [[#gerbil-server][Gerbil Server]]
:END:


* Demo and Documentation
:PROPERTIES:
:CUSTOM_ID: demo-and-documentation
:END:

The idea here is that the documentation outlines and implements a demo
which itself is a test of the SPA library itself.

** Index.html
:PROPERTIES:
:CUSTOM_ID: indexhtml
:END:

The premise is that the =index.html= takes care of some dependencies
and then loads =index.js=.

#+begin_src html :tangle ./spa/demo/html/index.html
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>ECM-SPA Demo</title>
        <!-- CSS FILES -->
        <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/uikit@latest/dist/css/uikit.min.css">
        <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
        <script>
          /*to prevent Firefox FOUC, this should be here*/
          let FF_FOUC_FIX;
        </script>
      </head>
      <body><div id="EcmSPA"> This is where the SPA will be. Loading spinner perhaps</div>
      <script src="https://cdn.jsdelivr.net/npm/uikit@latest/dist/js/uikit.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/uikit@latest/dist/js/uikit-icons.min.js"></script>
      <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
      <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

      <script src="https://unpkg.com/style-to-js@latest/umd/style-to-js.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/any-date-parser@1.5.4/dist/browser-bundle.js"></script>
      <script src="index.js"></script>
      </body>
    </html>
#+end_src


What is done is to replace the contents of =#EcmSPA= with =./main.html=.

** =main.html=
:PROPERTIES:
:CUSTOM_ID: mainhtml
:END:

#+begin_src html :tangle ./spa/demo/html/main.html
  <div id="demoMain">
   <nav data-ecm-replace="/navbar.html"></nav>
    <div data-ecm-replace="auto-select.html"></div>
    <div data-ecm-replace="datetime.html"></div>
    <script>
    </script>
  </div>

#+end_src

** Navbar
:PROPERTIES:
:CUSTOM_ID: navbar
:END:

#+begin_src html :tangle ./spa/demo/html/navbar.html
     <nav class="uk-navbar-container">
      <div class="uk-container-expand" >
        <div uk-navbar>
          <div class="uk-navbar-left uk-padding uk-padding-remove-right uk-padding-remove-vertical">

            <a class="uk-navbar-item uk-logo" href="#" aria-label="Back to Home">Logo</a>

            <ul class="uk-navbar-nav">
              <li>
                <a href="#">
                  <span class="uk-icon uk-margin-small-right" uk-icon="icon: star"></span>
                  Features
                </a>
              </li>
            </ul>

            <div class="uk-navbar-item">
              <div>Some <a href="#">Link</a></div>
            </div>

            <div class="uk-navbar-item">
              <form action="javascript:void(0)">
                <input class="uk-input uk-form-width-small" type="text" placeholder="Input" aria-label="Input">
                <button class="uk-button uk-button-default">Button</button>
              </form>
            </div>

          </div>

        </div>
      </div>
    </nav>
#+end_src

** Components
:PROPERTIES:
:CUSTOM_ID: components
:END:

There's not that many external components needed now a days.

*** Dates and Times
:PROPERTIES:
:CUSTOM_ID: dates-and-times
:END:

 First a regular date.

 
#+begin_src html :tangle ./spa/demo/html/datetime.html
   <div id="ecmDateAndTimeDemo">

  This is a regular <code>data-ecm-date</code> attribute.
  <input data-ecm-date type="date" class="uk-input" name="ecm-date"/>
   
  </div>
#+end_src

*** Auto Select
:PROPERTIES:
:CUSTOM_ID: auto-select
:END:

To start off simple we have an HTML select.

#+begin_src html :tangle ./spa/demo/html/auto-select.html
  <div>
  This is testing the <code>data-ecm-select</code> attribute
    <select class="uk-select" data-ecm-select name="examiner-id">
      <option selected></option>
      <option value="1">First Lady</option>
      <option value="2">Second Cousin</option>
      <option value="3">Third Place</option>
      <option value="4">Four on the floor</option>
    </select>
  </div>
    
#+end_src


* Implementation
:PROPERTIES:
:CUSTOM_ID: implementation
:END:

This is the literate outline of the implementation of EcmSPA.

https://www.npmjs.com/package/style-to-js

https://javascript.info/onload-ondomcontentloaded

** Pages, in single page? The router
:PROPERTIES:
:CUSTOM_ID: pages-in-single-page-the-router
:END:

#+begin_src js :tangle ./spa/js/index.js :comments org
   function EcmRouter() {
       this.elements = {}
       return this;
   }

   EcmRouter.prototype.loadElement = function(name, use_cache = true) {
       if (use_cache) {
   	const el = this.elements[name]
   	if (el) { return new Promise(r => r(el)); }
       }
       
       return fetch(name)
       	.then(res => res.text()
         	      .then(t => {
       		  const edoc = new DOMParser().parseFromString(t, "text/html"),
   			el = edoc.body.firstChild
       		  this.elements[name] = el
   		  return el
       	      })
   	     )
   }


#+end_src

** An =EcmSPA= object, global =ECM= instance
:PROPERTIES:
:CUSTOM_ID: an-ecmspa-object-global-ecm-instance
:END:

#+begin_src js :noweb-ref global-ECM
  window.addEventListener("load", (event) => {
      const ECM =  new EcmSPA();
      globalThis.ECM = ECM


      ECM.loadScript('EcmSelect.js').then(_ => {
   	ECM.loadElement('/main.html').then(main => {
  	    const body = document.querySelector("#EcmSPA")
  	    body.replaceChildren(main)
  	})
      })
  });

#+end_src


*** Constructor =EcmSPA=
:PROPERTIES:
:CUSTOM_ID: constructor-ecmspa
:END:

#+begin_src js :tangle ./spa/js/index.js :comments org
  function EcmSPA () {
      this.router = new EcmRouter()
      this.locale = Intl.DateTimeFormat().resolvedOptions().locale;
         return this;
  }
#+end_src

*** =.querySelector= mostly to find data attributes
:PROPERTIES:
:CUSTOM_ID: queryselector-mostly-to-find-data-attributes
:END:

This is because we want to modify/replace elements as they are loaded.

#+begin_src js :tangle ./spa/js/index.js :comments org
  EcmSPA.prototype.querySelectorAll = function(el, ... sels){
     const selThis = el.matches(... sels), selC = el.querySelectorAll(... sels)
  
    return [... selThis ? [el] : [], ... selC]
  }
#+end_src



*** Initialize an element
:PROPERTIES:
:CUSTOM_ID: initialize-an-element
:END:

#+begin_src js :tangle ./spa/js/index.js :comments org

  EcmSPA.prototype.initFunctions = {}
  EcmSPA.prototype.initElement = function(el) {
      Object.values(this.initFunctions).forEach(init => {
  	init.call(this, el)
      })
      
      $(el).data('ecm-instance', true)
      return el
  }
#+end_src

*** Load an element
:PROPERTIES:
:CUSTOM_ID: load-an-element
:END:

#+begin_src js :tangle ./spa/js/index.js :comments org
  EcmSPA.prototype.loadElement = function(name, use_cache = true){
     return this.router.loadElement(name, use_cache).then(e => {
      // some elements might replace themselves
        const bdy = document.createElement('div');
         bdy.append(e)
  	if (!$(e).data('ecm-instance')) {
  	    this.initElement(e)
  	}
  	return bdy.firstChild
      })
  }
#+end_src

*** =replaceElement= Replace an element
:PROPERTIES:
:CUSTOM_ID: replaceelement-replace-an-element
:END:

#+begin_src js :tangle ./spa/js/index.js :comments org
  EcmSPA.prototype.replaceElement = function(from, to, use_cache = true){
     return this.loadElement(to, use_cache).then(e => {
        from.replaceWith(e)
        return e
      })
  }
#+end_src

#+begin_src js  :tangle ./spa/js/index.js :comments org
  EcmSPA.prototype.initFunctions.ecm_replace = function (el) {
      const init = (e) => { this.replaceElement(e, $(e).data('ecm-replace'))};
      this.querySelectorAll(el, '[data-ecm-replace]').forEach(init) 
  }
#+end_src

*** =.loadScript= Dynamic Loading of JavaScript files
:PROPERTIES:
:CUSTOM_ID: loadscript-dynamic-loading-of-javascript-files
:END:

#+begin_src js :tangle ./spa/js/index.js :comments org
  EcmSPA.prototype.loadScript = function (src) {
      const el = document.createElement('script'),
  	  pro = new Promise((res) => {
  	      el.onload = _ => {
  		  el.remove()
  		  res(el)
  	      }
  	  })
  	  el.setAttribute('src', src)
      
      this.element = el;
      document.body.append(el)
      return pro
  }
#+end_src


** =EcmElement= and the =EcmSPA.domElements[]= cache: The superclass of all
:PROPERTIES:
:CUSTOM_ID: ecmelement-and-the-ecmspadomelements-cache-the-superclass-of-all
:END:


#+begin_src js :noweb-ref EcmElement
  EcmSPA.prototype.domElements = {}

  EcmSPA.prototype.addDomElement = function (domEl, ecmEl) {
      const map = this.domElements[ecmEl.constructor.name], cache =  map || new WeakMap()
      cache.set(domEl, ecmEl)
      if (!map)  this.domElements[ecmEl.constructor.name] = cache
  }
      
  EcmSPA.prototype.getElement = function (domEl, type = false) {
      if (type) {
  	return this.domElements[type].get(domEl)
      } else {
  	let ret = undefined,
  	    arr = Object.values(this.domElements)
  	for (let i = 0; i < arr.length ; i++) {
  	    const el = arr[i].get(domEl)
  	    if (typeof el !== 'undefined') {
  		ret = el ; break
  	    }
  	}

  	if (typeof ret !== 'undefined') {
  	    return ret
  	} else {
  	    const p = domEl.parentNode
  	    if (p) {
  		return this.getElement(p)
  	    } else return ret
  	}
      }

  }

  function EcmElement(el) {
      this.addDomElement(el)
      
      return this
  };
      
  Object.defineProperty(EcmElement.prototype, 'ECM', {
    get() { return globalThis.ECM || EcmSPA.prototype }
  })

      
  EcmElement.prototype.addDomElement = function (el) {
      return this.ECM.addDomElement(el, this)
  }
#+end_src

** =EcmDateTime=: ="date"=. ="time"= and ="datetime-local"=
:PROPERTIES:
:CUSTOM_ID: ecmdatetime-date-time-and-datetime-local
:END:
https://air-datepicker.com/
https://www.jsdelivr.com/package/npm/air-datepicker
https://flatpickr.js.org/
#+begin_src js  :noweb-ref ecm-date-time
  EcmSPA.prototype.initFunctions.ecm_date = function (el) {
      const init = (e) => { new EcmDateTime(e) };
      if (el.hasAttribute('data-ecm-date')) { init(el) }
      $(el).find('[data-ecm-date]').each((_, e) => {  init (e) })
      
  }
#+end_src



*** Constructor
:PROPERTIES:
:CUSTOM_ID: constructor
:END:

#+begin_src js :noweb-ref ecm-date-time
  function EcmDateTime(el, args = {}) {
      const myEl = this.makeElement(),
  	  type = (args && args.type) || el.type || 'date',
  	  opts = Object.assign({}, this.defaultArgs, args),
  	  fmtStr = opts.format || opts.fmt[type],
  	  dispFmt = opts.display || opts.disp[type],
  	  iconType = opts.icon, locale = opts.locale || this.ECM.locale,
            self = this

      EcmElement.call(this, el)
            
      this.options = opts
      this.locale = locale
      this.dateFormat = fmtStr
      this.displayFormat = dispFmt
      
      $(myEl).data('EcmDateTime', this)
      this.element = myEl;
      this.input = $(myEl).find('[ecm-datetime-input]').get(0)
      this.output = $(myEl).find('[ecm-datetime-output]').get(0)


      this.datepickerArgs = $.datepicker.regional[locale]
  	|| $.datepicker.regional['en']
  	|| $.datepicker.regional['']

      this.datePicker = $('<input data-ecm-datetime-date type="text">')
  	  .appendTo(myEl).get(0)

      $(this.datePicker).datepicker(Object.assign(
  	 {},
  	 this.datapickerArgs,
  	 {
  	     showOn: "button",
  	     dateFormat: this.dateFormat,
              onSelect(date, dp) {
                  console.log(date, self.parse(date))
                  self.Date = self.parse(date);
                  self.input.value = self.format(self.displayFormat)
  	     }
  	 }));

      $(myEl).find('[ecm-datetime-icon]').each((_,e) => {
  	  this.icon = e
          $(e).on('click', _ => { $(this.datePicker).datepicker("show") })
      }).attr('uk-icon', iconType)
      

      if (el.jquery) { el = el[0] };
      el.replaceWith(myEl);

      this.initEvents()
    
      return this //.init(el);
  }

  Object.setPrototypeOf(EcmDateTime.prototype, EcmElement.prototype);

  EcmDateTime.prototype.defaultArgs = {
      fmt: {
  	date: 'yy-mm-dd'
      },
      disp: {
  	date: 'M dd, yy'
      },
      icon: 'calendar'
  }

  EcmDateTime.prototype.format = function (fmtStr) {
      console.log('Format', fmtStr, this.Date, this.datepickerArgs) 
     return $.datepicker.formatDate(fmtStr, this.Date, this.datepickerArgs)
  }
  EcmDateTime.prototype.initEvents = function () {
      // Parse on input
      const self = this
      $(this.input).on('keyup', function() { self.parseEvent() })
      $(this.input).on('change', function() {
         console.log("change event", $(self.input).parent())
  	self.parseEvent()
  	$(self.input).parent().removeClass('uk-alert-success uk-alert-danger uk-alert-warning')
      })

  }



  /* Canadian-French initialisation for the jQuery UI date picker plugin. */
  jQuery(function ($) {
  	$.datepicker.regional['fr-CA'] = {
  		closeText: 'Fermer',
  		prevText: 'Précédent',
  		nextText: 'Suivant',
  		currentText: 'Aujourd\'hui',
  		monthNames: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
  			'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'],
  		monthNamesShort: ['janv.', 'févr.', 'mars', 'avril', 'mai', 'juin',
  			'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'],
  		dayNames: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],
  		dayNamesShort: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
  		dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  		weekHeader: 'Sem.',
  		dateFormat: 'yy-mm-dd',
  		firstDay: 0,
  		isRTL: false,
  		showMonthAfterYear: false,
  		yearSuffix: ''
  	};
  });
#+end_src

*** The =Date= property
:PROPERTIES:
:CUSTOM_ID: the-date-property
:END:

#+begin_src js :noweb-ref ecm-date-time
  EcmDateTime.prototype.setDate = function(val) {
      if (val instanceof Date || !val) {
  	this._Date = val
          this.output.value = this.format(this.dateFormat)
          
  	return val
      } else if (typeof val == 'object') {
  	const valDate = this._Date || new Date()
  	if (val.year) valDate.setFullYear(val.year)

  	if (val.month) {
  	    valDate.setMonth(val.month - 1)
  	} else valDate.setMonth(0)
      if (val.day) {
  	    valDate.setDate(val.day)
  	} else valDate.setDate(1)


  	return this.setDate(valDate)
      }
  }

  Object.defineProperty(EcmDateTime.prototype, "Date", {
      get() { return this._Date || false },
      set(val) { return this.setDate(val) }
  })
  	
#+end_src


*** Parser
:PROPERTIES:
:CUSTOM_ID: parser
:END:
The parser. Gotten from https://github.com/kensnyder/any-date-parser



#+begin_src js :noweb-ref ecm-date-time
  EcmDateTime.prototype.parseLocales = ['en-CA', 'fr-CA'];
  EcmDateTime.prototype.parse = function(str = false) {
      var firstLocale = this.locale || $('body').data('ecmSPA').locale,
  	Locales = [firstLocale, ... this.parseLocales.filter(l => l !== firstLocale)],
  	string = !!str ? str : this.input.value,
  	parse = (l) => anyDateParser.attempt(string, l),
  	date = false, n = 0

      while (!date && Locales[n]) {
  	const ret = parse(Locales[n])

  	if (!ret.invalid) {
  	    date = ret
  	} else {
  	    n = n + 1
  	}
      }

      return date
  }

  EcmDateTime.prototype.parseEvent = function() {
      const wrapper = $(this.icon).parent()

      $(wrapper).removeClass('uk-alert-success uk-alert-danger uk-alert-warning')
  	.addClass('uk-alert-warning')
  	.attr('uk-tooltip', 'parsing ...')

      $(wrapper).each((_, element) => UIkit.tooltip(element).show())

      this.icon.style.color = 'unset'
      

      const date = this.parse()
      this.Date = date

      if (date) {
          console.log('parsed: ', date);
          $(wrapper).each((_, element) => UIkit.tooltip(element).hide())
  	$(wrapper).removeClass('uk-alert-warning').addClass('uk-alert-success')
  	    .attr('uk-tooltip', this.output.value)
          $(wrapper).each((_, element) => UIkit.tooltip(element).show())
      }

  }

#+end_src

*** HTML
:PROPERTIES:
:CUSTOM_ID: html
:END:
#+begin_src js :noweb-ref ecm-date-time
      EcmDateTime.prototype.elementHtml = `
      <div data-ecm-datetime-wrapper class="uk-margin uk-inline uk-input">
               <a ecm-datetime-icon class="uk-form-icon uk-form-icon-flip" href="#" uk-icon="icon: link"></a>
               <input ecm-datetime-input class="uk-input" type="text">
               <style> [data-ecm-datetime-wrapper] { position: relative }
                [data-ecm-datetime-wrapper] .uk-input {
                    background: unset;
                    height: 38px;
                    vertical-align: unset;
                 border: 0px;
                }
                [data-ecm-datetime-wrapper] .ui-datepicker-trigger { display: none }
                [data-ecm-datetime-wrapper] .hasDatepicker { 
                  position: absolute; bottom: 0px ; border: none; height:0px; width:0px; z-index; -42 }
                [data-ecm-datetime-wrapper] .hasDatepicker:focus-visible {
   	        outline: none
                  }
                </style>
               <input ecm-datetime-output type="hidden">
     </div> 
     `;
     EcmDateTime.prototype.makeElement = function(html = false) {
      const edoc = new DOMParser().parseFromString(html || this.elementHtml, "text/html"),
            child = edoc.body.firstChild
         return child;
     }
#+end_src





*** <input type="date">
:PROPERTIES:
:CUSTOM_ID: input-typedate
:END:



** =EcmSelect= dropdown select search autocomplete thing
:PROPERTIES:
:CUSTOM_ID: ecmselect-dropdown-select-search-autocomplete-thing
:END:

https://www.algolia.com/blog/engineering/how-to-implement-autocomplete-with-javascript-on-your-website/
https://stackoverflow.com/questions/30797244/detecting-the-end-of-the-scrollable-drop-down

https://codepen.io/mehuldesign/pen/eYpbXMg


#+begin_src js :tangle ./spa/js/EcmSelect.js
  function EcmSelect(select) {
      const el = this.templateElement(),
  	  parent = select.parentElement,
  	  input = el.querySelector('form').querySelector('input'),
  	  output =  el.querySelector('input'),
  	  ul =  el.querySelector('form').querySelector('ul'),
            display =  el.querySelector('form').querySelector('div'),
            close = display.querySelector('.ecm-close'),
  	  obj = this.selectToObject(select),
  	  options = obj.options, self = this

      EcmElement.call(this, el);
      output.name = obj.name
      el.style.position = 'relative'

      select.replaceWith(el);

      Object.assign(this, {
  	element: el, output, input, display, ul, options
      })

      el.addEventListener('click', function(event) {
  	const disp = ul.style.display, val = self.selectedOption,
  	      hidden = disp !== 'block', hide = !hidden
  	self.blurred = false;
          event.stopPropagation() 
          console.log("Clin on EL'=, hidden", hidden, ul.style.display,self.showUl, val, hide)
  	ul.style.display = hide || val ? 'none' : 'block'
      })
      el.addEventListener('mouseleave', function () { self.blurred = false ;})
      close.addEventListener('click', function (e) { e.stopPropagation() ;self.selectOption({value: false})})

      ul.addEventListener('mouseover', () => { this.showUl = true; input.focus()})
      ul.addEventListener('mouseleave', function () { self.showUl = false ; self.blurred = false})

      // * The input type=text

      input.addEventListener('click', event => { event.stopPropagation() ;})
      input.addEventListener('focus',function () { ul.style.display = 'block'})
      input.addEventListener('blur', function () {
  	if (!self.showUl) {
  	    ul.style.display = 'none'
  	    self.blurred = true;
  	}})

      input.addEventListener('keydown', function (event) {
  	event.stopPropagation() ;
  	self.onKeyDown(this, event)
      })
      setTimeout(function test() {
  	if (parent.contains(el)) {
  	    input.style.height = '' + (el.offsetHeight - 2) + 'px'
  	    
  	} else {
  	    setTimeout(test, 50);
  	}
      }, 50);
      
      // Object.assign(ul.style, {
      // 	position: 'absolute', left: '2px', right: '3px',
      //     border: '1px solid #dfe8f1', borderTop: '0px', borderRadius: '3px',
      // 	margin: '0px', listStyle: 'outside none none',
      //     boxShadow: '0 1px 24px 2px rgba(135, 158, 171, 0.2)',
      // 	zIndex: 7, backgroundColor: '#fff', backgroundClip: "padding-box",
      // })

      obj.options.forEach(opt => {
  	this.addOption(opt)
      })


  	
       // console.log('o?', this.optionElement("foo"), el.offsetHeight)
      this.ul.append(this.optionElement("foo"))

      console.log('New EcmSelect', this)

       if (!document.head.dataset.ecmSelectCss) {
      	document.head.append(this.templateStyleElement())
           document.head.dataset.ecmSelectCss = true
      }

      this.element = el
      
      
      return this;
  }

  Object.setPrototypeOf(EcmSelect.prototype, EcmElement.prototype);

  EcmSPA.prototype.initFunctions.EcmSelect = function (el) {
      this.querySelectorAll(el, '[data-ecm-select]')
  	.forEach(e => new EcmSelect(e)) 
  }


     
  EcmSelect.prototype.onKeyDown = function (el, event) {
      const arrow = (key) => {
  	let idx = this.hoverIdx(),
  	    opts = this.ul.childNodes,
  	    len = opts.length
  	key === 40 ? key = 'down' : key = 'up'

  	if (key === 'down' && (idx + 1) < len) {
  	    const li = opts[idx + 1]
  	    this.addHover(li)
              li.scrollIntoView()
  	} else if (key === 'up' && (idx - 1 >= 0)) {
  	    const li = opts[idx - 1]
  	    this.addHover(li)
              li.scrollIntoView()
  	} else if (key === 'up') {
              this.addHover(false)
  	}

              
  	console.log('Hover', idx, ' opts ', opts)
      }

      if (event.which === 40 || event.which === 38) {
  	arrow(event.which)
      }
  	




  }
      
      
  EcmSelect.prototype.selectToObject = (select) => {
      return {
    	name: select.name,
            required: select.hasAttribute('required'),
    	options: [... select.options].map(o => {
    	    return obj = {
    		value: o.value,
    		text: o.text,
    		selected: o.selected
    	    }
    	})
      }
  };

  EcmSelect.prototype.selectedOption = false;

  EcmSelect.prototype.selectOption = function (opt) {
      this.selectedOption = opt;
      const val = opt.value, close = this.display.querySelector('.ecm-close')
      console.log("Selecting Option: ", opt, close)
      this.display.textContent = ''
      this.display.append(close);
      if (val || typeof val === 'string') {
  	this.output.value = val
  	this.display.prepend(opt.text);
          this.display.style.display = 'block'
          
      } else {
  	this.output.removeAttribute('value');
          this.display.style.display = 'none'
          this.selectedOption = false
      }
      return opt
  }
  EcmSelect.prototype.selectOptionElement = function (el) {
      const opt = {
  	text: el.textContent,
  	value: el.getAttribute("data-ecm-value")
      }
      this.selectOption(opt)
      this.ul.style.display = 'none'
      return opt
  }


  EcmSelect.prototype.hoverIdx = function () {
      var idx = -1
      
      Array.from(this.ul.children).forEach((el, n) => {
  	if (el.hasAttribute('data-ecm-hover')) idx = n;
      })
      return idx
  }

  EcmSelect.prototype.addHover = function (el) {
      el && el.setAttribute('data-ecm-hover', '')
      Array.from(this.ul.children).forEach(e => {
  	if (el !== e) {
  	    e.removeAttribute('data-ecm-hover')
  	}
      })
  }

  // EcmSelect.prototype.onKeyDown = function 
  	    
  EcmSelect.prototype.addOption = function (opt) {
      const {text, value, selected} = opt
      el = this.optionElement(text, value, selected),
      ex = this.options.find(o => o.text === text),
      self = this

      console.log('added option', opt, el)
      if (ex) { 
  	Object.assign(ex, opt)
      } else this.options.push(opt);
      
      el.addEventListener('mouseover',function () { self.addHover(this) })
      el.addEventListener(
  	  'mouseleave', function() { el.removeAttribute('data-ecm-hover')})
      el.addEventListener('click', function(event) {
  	event.stopPropagation()
  	self.selectOptionElement(this)
      })



      this.ul.append(el)

      return el
  }




  EcmSelect.prototype.template = `<div data-ecm-select-wrapper \
   class="ecm-select uk-select"
    ><input type="hidden"
    ><form autocomplete="off"
       ><div><a class="ecm-close" href="#"></a></div
       ><input class='uk-input' type="text"
       ><ul class="ecm-options" tabindex="0"></ul
    ></form
   ></div>`;

  EcmSelect.prototype.templateElement = function(tpl = false) {
      const el = document.createElement('div')
      el.innerHTML = tpl || this.template;
      return el.firstElementChild;
  }


  EcmSelect.prototype.optionElement = function (txt, value, selected) {
      const li = document.createElement('li'),
  	  a = document.createElement('a')
      if (selected) {
  	a.innerHTML = `<span style="position: absolute; left:4px ; top: 0.5em"
            uk-tooltip="Default value" uk-icon="check">&nbsp;</span>`
      }
      a.append(txt || "\u00A0")
      if (value || typeof value === 'string') {
  	li.setAttribute('data-ecm-value', value)
      }

      li.append(a)
      return li
  }

  EcmSelect.prototype.templateStyle = `
   .ecm-select { position:relative; z-index: 1}

    .ecm-select input {
      background: unset;
      height: 38px;
      vertical-align: unset;
      border: 0px;
   }

       .ecm-options{
         background-clip: padding-box;
         background-color: #fff;
         border: 1px solid #dfe8f1;
         border-top: unset;
         border-radius: 3px;
         box-shadow: 0 1px 7px 2px rgba(135, 158, 171, 0.2);
         display: none;
         padding: 0 0 10px;
         position: absolute;
         z-index: 0; 
         float: left;
         list-style: outside none none; max-height:220px; overflow:scroll;
         margin:0px;
         left:0px;
         right:0px;
         
       }
       ul.ecm-options li a {
         padding-left: 2em;
         cursor: pointer;
         white-space: nowrap;
         text-overflow: ellipsis;
         overflow: hidden;
         color: #4c4c4c;
         text-decoration: none;
         outline: 0;
       }
      ul.ecm-options li[data-ecm-hover] {
       background: none repeat scroll 0 0 #eff4f6;
       cursor: pointer;
       text-decoration: underline;
       color: #1e87f0;
      }

   .ecm-select form div  {
     position: absolute;
     top: 0px; right:0px; left: 0px; bottom: 0px;
     background: #f8f8f8;
     color: #666;
     display: none;
     padding-left: 1em;
   } 
   .ecm-select form div a {
      float: right; 
  	-webkit-appearance: none;
  	-moz-appearance: none;
  	width: 1em;
  	height: 100%;
  	margin: auto;
  	margin-right: 0.5em;
          background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 14 14' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(25,25, 25, 1)' stroke-width='1' stroke-linecap='round' stroke-miterlimit='10' d='M1 1 L14 14 M1 14 L14 1'/%3E%3C/svg%3E");
  	background-repeat: no-repeat;
  	background-position: 100% 50%;
    }

    [data-ecm-select-display] a:hover {
       cursor: pointer;
       text-decoration: underline;
       color: #1e87f0; width: 1.33em;
      }

  `;

  EcmSelect.prototype.templateStyleElement = function (css) {
      const style = document.createElement('style')
      style.append(css || this.templateStyle)
      return style;
  }
   
#+end_src
      

*** =this.selected=: Select "option" property
:PROPERTIES:
:CUSTOM_ID: thisselected-select-option-property
:END:

#+begin_src js :noweb-ref ecm-auto

  Object.defineProperty(EcmAutoComplete.prototype, 'selected', {
      get() { return this.selectedElement },
      set(v) {
  	 this.selectedElement = v;
           const disp = v && v.firstChild && v.firstChild.firstChild
  		 ? v.firstChild.firstChild.cloneNode(true) : " " //v.firstChild.cloneNode(true) : false
           console.log('settong', v, disp)
          $(this.optionsUl).hide()
  	 if (!v) {
  	     $(this.display).css('z-index', '-42')
  		 .hide().contents().filter((n) =>  n > 0 ).remove()
  	     $(this.input).css('z-index', 'auto')
  	 } else {
               
  	     $(this.input).css('z-index', '-42')
  	    // $(this.display).css('z-index', 'auto')
  	     $(this.display).show().css('z-index', 'auto').append(disp)
  	 }
  	 return v
      }
  });
#+end_src


*** Default Static Select
:PROPERTIES:
:CUSTOM_ID: default-static-select
:END:

The idea here is that a =<select>= becomes an =EcmAutoComplete=
without any effort on our side.

#+begin_src js :noweb-ref ecm-auto
  EcmAutoComplete.prototype.selectToObject = (select) => {
    return {
  	name: select.name,
          required: $(select).attr('required'),
  	options: [... select.options].map(o => {
  	    return obj = {
  		value: o.value,
  		text: o.text,
  		selected: o.selected
  	    }
  	})
    }
  };
#+end_src

That select turns into our select.

#+begin_src js :noweb-ref ecm-auto

              EcmAutoComplete.prototype.elementHtml = `
                 <div data-ecm-select-wrapper class="ecm-select uk-select">
                  <input type="hidden" data-ecm-select-out>
                  <form autocomplete="off">
                  <div data-ecm-select-display><a class="ecm-close" href="#"></a></div>
                   <input class='uk-input' type="text" data-ecm-select-text>
                   <ul class="ecm-options" data-ecm-options></ul>
                  </form>
                 </div>`;

                EcmAutoComplete.prototype.makeEmptyElement = function(html = false) {
                 const edoc = new DOMParser().parseFromString(html || this.elementHtml, "text/html"),
                       child = edoc.body.firstChild
                    return child;
                }
#+end_src


So just need a way to put them together.

#+begin_src js :noweb-ref ecm-auto
  EcmAutoComplete.prototype.optionsUl = false;
  EcmAutoComplete.prototype.addOptions = function (opts) {
      const ul = this.optionsUl 
      var list = ''
      
      for (i=0; i<opts.length; i++) {
  	list += '<li data-ecm-option'
  	    + ((val = opts[i].value) => {
  	      if (val) {
  		  return '="' + val + '"';
  	      } else  { return '' }
  	  })()
  	    + '><a href="#">'+opts[i].text+'</a></li>'
  	if (opts[i].selected) this.selected = opts[i]
      }

      ul.innerHTML = ul.innerHTML + list
  }


  	    
  EcmAutoComplete.prototype.makeElement = function (name = '', opts = [], html = false) {
      const el = this.makeEmptyElement(html)
      console.log('el', el)
      $(el).find('[data-ecm-select-name]').each((_, e) => {
  	this.nameInput = e
  	e.setAttribute('name', name)
      });
      $(el).find('[data-ecm-select-text]').each((_, e)  => { this.textInput = e });
      $(el).find('[data-ecm-options]').each((_, e) => {
  	this.optionsUl = e
  	this.addOptions(opts)
      });
     this.options = opts
     console.log('el', el, ' opts ', this.options)
  return el;
  };

  EcmAutoComplete.prototype.makeElementFromSelect = function (sel, html = false) {
   const {name, options} = this.selectToObject(sel)

   return this.makeElement(name, options)
  }
#+end_src


** The css style
:PROPERTIES:
:CUSTOM_ID: the-css-style
:END:

#+begin_src js :noweb-ref ecm-auto
  EcmAutoComplete.prototype.elementCss = `
   .ecm-select { width: unset; position:relative; z-index: 1}

    .ecm-select input {
      background: unset;
      height: 30px;
       vertical-align: unset;
   }

       .ecm-options{
         background-clip: padding-box;
         background-color: #fff;
         border: 1px solid #dfe8f1;
         border-top: unset;
         border-radius: 3px;
         box-shadow: 0 1px 7px 2px rgba(135, 158, 171, 0.2);
         display: none;
         list-style: outside none none;
         padding: 0 0 10px;
         position: absolute;
         z-index: 0; 
         float: left;
         list-style: outside none none; max-height:220px; overflow:scroll;
         margin:0px;
         left:0px;
         right:0px;
         
       }

       ul.ecm-options li {
         float: none;
         display: block;
         clear: both;
         position: relative;
       }

       ul.ecm-options li a {
         padding: .9em 1em .9em .8em;
         position: relative;
         clear: both;
         cursor: pointer;
         display: block;
         white-space: nowrap;
         text-overflow: ellipsis;
         overflow: hidden;
         color: #4c4c4c;
         text-decoration: none;
         outline: 0;
       }
            ul.ecm-options li[data-ecm-selected] a {
       background: none repeat scroll 0 0 #eff4f6;
       cursor: pointer;
       text-decoration: underline;
  	color: #1e87f0;
      }

   [data-ecm-select-display]  {
     position: absolute;
     top: 0px; right:0px; left: 0px; bottom: 0px;
     background: #f8f8f8;
     color: #666;
     display: none;
     padding-left: 1em;
   } 
   [data-ecm-select-display] a {
      float: right; 
  	-webkit-appearance: none;
  	-moz-appearance: none;
  	width: 1em;
  	height: 100%;
  	margin: auto;
  	margin-right: 0.5em;
          background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 14 14' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(25,25, 25, 1)' stroke-width='1' stroke-linecap='round' stroke-miterlimit='10' d='M1 1 L14 14 M1 14 L14 1'/%3E%3C/svg%3E");
  	background-repeat: no-repeat;
  	background-position: 100% 50%;
    }

    [data-ecm-select-display] a:hover {
       cursor: pointer;
       text-decoration: underline;
       color: #1e87f0; width: 1.33em;
      }

  `;

  EcmAutoComplete.prototype.appendStyle = function (replace = false) {
      const existing = $(document.head).data('ecm-autocomplete-style')
      if (existing && !replace) { return existing }
      
      const style = document.createElement('style')
      style.append(this.elementCss)
      $(document.head).append(style)
      $(document.head).data('ecm-autocomplete-style', style)
      return style;
  }
   
      
#+end_src

** The rest of =index.js=
:PROPERTIES:
:CUSTOM_ID: the-rest-of-indexjs
:END:
#+begin_src js :tangle ./spa/js/index.js :noweb yes
  <<EcmElement>>

      
  function EcmAutoComplete (args, replace = false) {
      const self = this;

      self.appendStyle()

      function isElement(element) {
  	return element instanceof Element || element instanceof HTMLDocument;  
      }
      
      if (isElement(args)) {
          const existing = $(args).data('ecm-autocomplete')
          if (existing) { return existing }
          if (args.tagName.toLowerCase() !== "select") {
             throw new Error("Cannot yet make an autocomplete from a non-select")
           }
  	this.element = this.makeElementFromSelect(args)
          if  (replace) { args.replaceWith(this.element) }
          $(this.element).data('ecm-autocomplete', this);
          this.init(this.element);
  	return this
      } ;
  };

  // * KeyDown

  EcmAutoComplete.prototype.onKeyDown = function (event) {
      let lis = $(this.optionsUl).find('li'),
  	len = lis.length - 1, idx = -1, e = event
     // event.stopPropagation();
     console.log('keydown')
      if (event.which === 40 || event.which === 38) {
  	$(lis).each((n, e) => {
  	    if(e.hasAttribute('data-ecm-selected')) {
                  console.log('idx', n)
  	 	e.removeAttribute('data-ecm-selected')
                  console.log('idx', n, e)
  	 	idx = n
  	    }
  	})
      }
          
      if (event.which === 40) {
  	// downarrow
          if (idx !== len) {
              idx++;  $(this.optionsUl).show()
          }
          const li = lis[idx]
          li.setAttribute('data-ecm-selected', '')
          li.scrollIntoView()
      } else if (event.which === 38) {
  	// uparrow
              if (idx > 0) {
               idx--
              } else { return }
              const li = lis[idx]
              li.setAttribute('data-ecm-selected', '')
              li.scrollIntoView()
  	} else if (event.which === 13) {
              console.log("Return!", $(lis).filter('[data-ecm-selected]'))
  	    $(lis).filter('[data-ecm-selected]').each((_, e) => {
  		this.selected = e
  	    })
  						      	    
  	}


  }

  EcmAutoComplete.prototype.init = function (element) {
      this.input = $(element).find('[data-ecm-select-text]').get(0)
      this.display = $(element).find('[data-ecm-select-display').get(0)

      $(this.display).on('click',  e => { console.log('clicked display');  e.stopPropagation(); e.preventDefault()})
      $(this.display).find('a').first().on('click', _ => this.selected = false)
      console.log('Got input', this.input)
      
      $(this.input).on("keyup", event => {
        if (event.which === 40 || event.which === 38 || event.which === 13) { return }
        console.log('Where are we now?',  this.showResults(this.input.value) )})
      $(this.input).on("blur", event => { $(this.optionsUl).hide() })

      $(this.optionsUl).on('mouseover', e => {
         const hli = $(e.target).parents('li').get(0)

        console.log('Monuseose==cver', $(e.target).parents('li'), e.target)
  	$(e.currentTarget).find('li').each((_, li) => {
               if (hli == li) {
  		 li.setAttribute('data-ecm-selected', true)
  	     } else {
  		 li.removeAttribute('data-ecm-selected')
  	     }
  	})
      });
  			    
  	    
  	    
  	
      $(this.element).on('keydown', e => this.onKeyDown(e));
      $(this.optionsUl).on('keydown', e => this.onKeyDown(e));
      $(this.element).on("keydowna", e => {
  	let lis = $(this.optionsUl).find('li'),
  	      len = lis.length - 1, idx = -1
  	 if (event.which === 40 || event.which === 38) {
  	     $(lis).each((n, e) => {
                 console.log('n', n, ' e', e)
  	 	if(e.hasAttribute('data-ecm-selected')) {
                      console.log('idx', n)
  	 	    e.removeAttribute('data-ecm-selected')
                      console.log('idx', n, e)
  	 	    idx = n
  	 	}
  	     })
  	 }
          
  	  if (event.which === 40) {
  	    // downarrow
              if (idx !== len) {
               idx++;  $(this.optionsUl).show()
              }
              const li = lis[idx]
              li.setAttribute('data-ecm-selected', '')
              li.scrollIntoView()
  	} else if (event.which === 38) {
  	    // uparrow
              if (idx > 0) {
               idx--
              } else { return }
              const li = lis[idx]
              li.setAttribute('data-ecm-selected', '')
              li.scrollIntoView()
  	} else if (event.which === 13) {
              console.log("Return!", $(lis).filter('[data-ecm-selected]'))
  	    $(lis).filter('[data-ecm-selected]').each((_, e) => {
  		this.selected = e
  	    })
  						      	    
  	}
   
      })

  	

  	
  	
  	
  	
  	      

    $(element).on("click",function(event){
    	   $(element).find('.ecm-options').toggle();
    });

  }

   EcmAutoComplete.prototype.autocompleteMatch = function (input) {
     // console.log('Matching', input, this.options)
      if (input == '') {
  	return [];
      }
      var reg = new RegExp(input)
      return this.options.filter(function({val, text}) {
  	if (text.match(reg)) {
    	    return {val, text};
  	}
      });
  }

  EcmAutoComplete.prototype.showResults = function (val) {
      resq = $(this.element).find(".ecm-options")
      res = resq[0]
      if (!this.firstHTML) { this.firstHTML = res.innerHTML }
      res.innerHTML = '';

      let list = '';
      let terms = this.autocompleteMatch(val);
      for (i=0; i<terms.length; i++) {
  	list += '<li data-ecm-option="'+terms[i].value+'"><a href="javascript:;">' + terms[i].text + '</a></li>';
      }
      resq.show()
      res.innerHTML = list || (this.input.value == '' ? this.firstHTML : '');
  }

  <<ecm-auto>>      

  <<ecm-date-time>>      

  <<global-ECM>>

 #+end_src

 
** Gerbil Server
:PROPERTIES:
:CUSTOM_ID: gerbil-server
:END:

#+begin_src scheme
  (reload :std/sxml/print)
  (reload :std/sxml/html/parser)
  (reload :std/html)
  (reload :std/sxml/tal/expander)
  (reload :std/sxml/tal/syntax)
  (reload :std/sxml/tal/toplevel)

  (current-directory "~/src/ecm-spa/spa/demo")
  (def spa-server (start-spa-http-server!))
#+end_src


#+begin_src scheme
  (import :std/net/httpd/mux :std/net/httpd :std/mime/types :std/net/uri :std/contract :std/interface)

  (def (fserve name (type "text/html"))
    (lambda (_ res) (http-response-file res `(("Content-type" . ,type)) name)))

  (current-directory "/Users/drewc/me/src/ecm-spa/spa/demo/")

  (def (default-serve req res (fdir (current-directory)))
    (def pathname (string-append "." (http-request-path req)))
    (def filename (if (equal? "" (path-strip-directory pathname))
  		  (path-expand "index.html" pathname)
  		  pathname))
    (displayln "got " filename " from request")
    (let f ((dirs (map (cut path-expand <> fdir)
  		     '("html/" "js/" "../js/"))))
      (with* (([dir rest ...] dirs)
  	    (fullname (path-expand filename dir)))
        (displayln "Looking for " fullname)
        
        (cond ((file-exists? fullname)
  	     ((fserve fullname (or (path-extension->mime-type-name filename)
  				   "application/octet-stream"))
  	      req res))
  	    ((null? rest)
  	     ((fserve "./html/index.html") req res))
  	    (else 
  	     (f rest))))))

  	
  (def spa-mux
    (make-static-http-mux
     (list->hash-table
      `(#;("index.html" .,(cut index.html <> <>))))
     (cut default-serve <> <>)))


  (def (start-spa-http-server! (address "0.0.0.0:8084"))
    (start-http-server! address mux: spa-mux))
#+end_src




