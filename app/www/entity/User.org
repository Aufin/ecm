#+TITLE: Users, the whole f'n point


#+begin_src js :tangle user.js

  function User(props) {
      this.object = props;

     if (!this.user_id && this.object.token) {
         this.promise = this.fetchUser().then(r => r.json())
  	   .catch(e => {this.object = {} ; return false})
  	   .then(r => {
  	       console.log("Token got?", r)
                 if (r) {
  	          Object.assign(this.object, r)
                 }
                 return r
  	   })
     }
    return this;
  }

  Object.setPrototypeOf(User.prototype, EcmElement.prototype);
  User.prototype.currentScript = document.currentScript;

  Object.defineProperties(User.prototype, {
      user_id: {
  	get() {
  	    return this.object.user_id ||
  		this.object._id || this.object.app_user_id;
  	},
  	set(val) {
  	    this.object.user_id = val
  	}
      },
      admin: {
  	get() {
  	    return this.object.admin || false
  	},
  	set(val) {
  	    this.object.admin = val
  	}
      }
  })

  User.init = function() {
   // This is a global function that should really only be run at first app
   // runtime OR possibly a user change while running by an admin?

      const token = ECM.getCookie('ecm-login')

    

      console.log('Have Token', token)

      if (token) {
  	  const u = new User({token});

  	  ECM.currentUser = _ => u;
            return u;
  	  
      }
      return false
  		 
  }

  User.prototype.fetchUser = function () {
      const user_id = this.user_id,
      token = this.token || this.object.token

      return fetch(this.pathExpand('user.ss?token=' + token))
  }

  // * Select users

  function SelectUser(_for = 'diary') {
      const sel = this.createHTML('<select class="uk-select uk-inline" placeholder="Select User"></select>'),
  	  opt = new Option()

      sel.append(opt)
      sel.setAttribute('uk-tooltip', 'Select User')
      sel.style.width = 'unset'
      this.element = sel;

      this.promise = fetch(this.pathExpand('user.ss?list'))
  	.then(r => r.json())
  	.then(jarr => {
  	    jarr.forEach(([id,name,n]) => {
  		const opt = new Option()
  		opt.setAttribute('value', id)
                  opt.dataset.n = n 
                  if (id == ECM.currentUser().user_id) {
  		    opt.setAttribute('selected', '')
  		}
  		opt.append(name)
  		sel.append(opt)
  	    })
  	})
      
      return this
  }
      

  Object.setPrototypeOf(SelectUser.prototype, EcmElement.prototype);
  SelectUser.prototype.currentScript = document.currentScript;
#+end_src

#+begin_src scheme :tangle user.ss
   (import
     :std/net/httpd :std/net/uri :std/sugar
     :std/format :std/db/dbi :std/interactive
     "../db" "../req" "../user.ss"
     :std/actor-v18/message :std/text/utf8)

   (export handler-init! handle-request)

   (def (handler-init! cfg)
     #t)

   (def (token->user-object token)
     (car
      (ecm-sql
       sql-eval-query "SELECT COALESCE(user_to_json(login.token_user_id($1)), 'false'::json)"
       token)))

   (def (select-user-list (for "diary"))
    (car
      (ecm-sql
       sql-eval-query "SELECT json_agg(json_array)
   FROM (SELECT json_array(app_user_id, short_name, (SELECT count(*) FROM diary_entry d WHERE d.app_user_id = app_user.app_user_id and not processed))
  FROM app_user LEFT JOIN person USING (person_id) WHERE EXISTS (SELECT true FROM diary_entry d WHERE d.app_user_id = app_user.app_user_id LIMIT 1) ORDER BY short_name) du;"
       )))


   (def handle-request
     (user-request-handler
      (lambda (req res)
         (def params (form-url-decode (or (http-request-params req) "")))
         (def user-id (assget "user_id" params))
         (def list (assget "list" params 'nope))
         (def token (assget "token" params))
         ;(def body (http-request-body req))
         ;(def json (and body (utf8->string body)))

         ;; (error "Upsert" upsert json)

         (def results
   	(cond (token (token->user-object token))
   	      ((not (eq? list 'nope)) (select-user-list))
   	      (else "{\"user_here\": 42 }")))

         (http-response-write
          res 200 '(("Content-Type" . "application/json"))
          results ))))
#+end_src
#+end_src
