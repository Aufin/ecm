
* Contracts

#+begin_src js :tangle contract.js
  function Contract(initargs) {
      Object.assign(this, initargs)
        
      return this;
  }

  EcmSPA.prototype.Contract = Contract;

  EcmSPA.prototype.contract_cache = { time: false, contracts: false }

  EcmSPA.prototype.loadContracts = async function () {
      const res = await fetch('entity/contract.ss'),
  	  json =  await res.json()

      this.contract_cache.contracts = json.map(c => new Contract(c))
      this.contract_cache.time = new Date()
      return this.contract_cache.contracts
  }

  EcmSPA.prototype.listContracts = async function () {
    const cs = this.contract_cache.contracts
    return cs ? new Promise (r => r(cs)) : this.loadContracts()
  }

  // console.log('Have ECM already FFS', EcmSPA)

#+end_src

The =ContractSelect= Element.

#+begin_src js :tangle contract.js
  function ContractSelect(select) {
      const ctxt = (c) => {
  	let txt = c.contract_number + ' '
  	txt = txt + c.effective_date + ' to ' + c.expiry_date;
  	if (c.syndicate) { txt = txt + ', ' + c.syndicate.short_name;}
  	if (c.london_broker) { txt = txt + ', ' + c.london_broker.short_name;}
  	if (c.agency) { txt = txt + ', ' + c.agency.short_name;}
  	return txt
      },
  	  spinner = document.createElement('div'),
  	  spin = document.createElement('div'),
            self = this;
            
      
      EcmSelect.call(this, select)

      spin.setAttribute('uk-spinner', '')
      spinner.style.width = '100%'
      spinner.style.textAlign = 'center'
      spinner.textContent = "Loading All Contracts...   "
      spinner.appendChild(spin)

   // async get and fill
      
      console.log("listing contracts", this)
      globalThis.conEL = this;


      this.input.style.display = 'none'
      this.element.prepend(spinner)

      

      ECM.listContracts().then(cs => {

  	console.log("listed contracts", cs)
  	cs.forEach(c => {

         if (c.contract_id) {
  		self.addOption({ text: ctxt(c),
  				 value: c.contract_id
  			       })
  	    }

  	})

  	 self.input.style.display = ''
  	 self.input.placeholder = 'Contract'
        	 spinner.remove()
      })

       return this;
   }

  Object.setPrototypeOf(ContractSelect.prototype, EcmSelect.prototype);

  EcmSPA.prototype.initFunctions.ContractSelect = function (el) {
      this.querySelectorAll(el, '[data-contract-select]')
  	.forEach(e => new ContractSelect(e)) 
  }
#+end_src


#+begin_src scheme :tangle contract.ss
   (import :std/net/httpd
           :std/format :std/db/dbi :std/interactive
   	"../db.ss" "../req" "../user2"
   	)

   (export handler-init! handle-request)

   (def (handler-init! cfg) #t)

   (def (foo)
     (car (ecm-sql sql-eval-query
   		  "SELECT json_agg(c)
     FROM (SELECT jso.contract(contract) AS c
           FROM contract ORDER BY contract_id DESC) jc")))
   ;; (def handle-request
   ;;   ;(user-request-handler
   ;;    (lambda (req res)
   ;;   (http-response-write res 200 '(("Content-Type" . "text/plain"))
        ;;                  (format "hello! I am a any servlet and my state is ~a ~n ~a ~a" 1 2 3))))
   ;)

   (def handle-request
     (user-request-handler
      (lambda (req res)
       ;;(error "HERE" (request-cookies req))
        (http-response-write res 200 '(("Content-Type" . "application/json"))
   			    (foo)))))

#+end_src
