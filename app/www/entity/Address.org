#+begin_src js :tangle address.js
  function SelectProvince(select, country) {
      EcmSelect.call(this, select)

      this.update("CA");
      return this;
  }


  SelectProvince.prototype.update = function(country) {
      this.options = []
      this.element.querySelector('ul').innerHTML = '';
    console.warn(this.element)
       if (!country) { return null }
       fetch(this.pathExpand('province.ss?country='+country)).then(r=>r.json())
  	.then(j => {
  	    console.log('provinces', j)
              j.forEach(c => {
  		this.addOption({
  		    value: c.code,
  		    text: c.name,
  		})
  	    })
  	   //  this.options.forEach(o => {
  	// 	if (o.selected) { this.selectOption(o) }
  	//     })
  	})

  }


  Object.setPrototypeOf(SelectProvince.prototype, EcmSelect.prototype);
  SelectProvince.prototype.currentScript = document.currentScript;
#+end_src

#+begin_src js :tangle address.js
  function SelectCountry(select, init) {
      EcmSelect.call(this, select)

      this.input.placeholder = "Country"

      fetch(this.pathExpand('country.ss')).then(r=>r.json())
  	.then(j => {
  	    console.log('countries', j)
              j.forEach(c => {
  		this.addOption({
  		    value: c.code,
  		    text: c.name,
  		    selected: c.code === init
  		})
  	    })
  	    this.options.forEach(o => {
  		if (o.selected) { this.selectOption(o) }
  	    })
  	})
      

      this.addOption({value: "CA", text: "Canada"})
      
      return this;
  }

      
  SelectCountry.prototype.makeUpdateEvent = (country) => {
      return new CustomEvent("update", {
  	detail: { country },
          bubbles: true
      });
  };

  Object.setPrototypeOf(SelectCountry.prototype, EcmSelect.prototype);
  SelectCountry.prototype.currentScript = document.currentScript;

  SelectCountry.prototype.selectOption = function (...args) {
        const parent = Object.getPrototypeOf(Object.getPrototypeOf(this)),
    	    el = parent.selectOption.call(this, ...args);
      this.element.dispatchEvent(this.makeUpdateEvent(this.selectedOption))
      console.log('WE DID IT! Dispatched?', this.element, el, ...args)
      return el
    };
#+end_src

#+begin_src scheme :tangle country.ss
      (import "../db.ss" "../req" "../user"
      :std/net/httpd :std/net/uri
      :std/format :std/db/dbi :std/interactive
      :std/actor-v18/message)

    (export handler-init! handle-request)

    (def (handler-init! cfg) #t)

    (def (countries)
      (car (ecm-sql sql-eval-query
    		  "SELECT json_agg(c) FROM (SELECT *
     FROM country ORDER BY name) c")))
    

    (def handle-request
      (user-request-handler
       (lambda (req res)
         (def params (form-url-decode (or (http-request-params req) "")))
         (def results (countries))
         (http-response-write res 200 '(("Content-Type" . "application/json"))
    			 results))))


#+end_src


#+begin_src scheme :tangle province.ss
    (import
    :std/net/httpd :std/net/uri
    :std/format :std/db/dbi :std/interactive
    "../db.ss" "../req" "../user"
    :std/actor-v18/message)

  (export handler-init! handle-request)

  (def (handler-init! cfg) #t)

  (def (provinces (country "CA"))
    (car (ecm-sql sql-eval-query
  		  "SELECT json_agg(c) FROM (SELECT *
   FROM province WHERE country = ($1) ORDER BY name) c" country)))


  (def handle-request
    (user-request-handler
     (lambda (req res)
       (def params (form-url-decode (or (http-request-params req) "")))
       (def country (or (assget "country" params) "CA"))
       (def results (provinces country))
       (http-response-write res 200 '(("Content-Type" . "application/json"))
  			 results))))


#+end_src
