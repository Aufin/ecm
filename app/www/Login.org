#+TITLE: Login: Users need Authenticating

The handler is [[file:login/login.ss::def (login-user username password][here]] for the server side.

There's a [[file:login/index.html::<!DOCTYPE html>][login/index.html]] that posts a u/p along with a =q= which is
is the redirect which will occur if the login is succesful.

All it really does is set an =ecm-login= cookie with a UUID token that
can get turned into a user by the rest of the front-and-middle ends.





* Outline

There are a few places that look for a few things.

[[file:/ssh:drewc@db.ecm.lan:~/old-maxclaims/old-maxclaims/maxclaims/src/login.lisp::in-package :maxclaims]]

* Forgot/Reset Password (2FA start)
:PROPERTIES:
:CUSTOM_ID: forgotreset-password-2fa-start
:END:

#+begin_src scheme :tangle login/reset-password.ss
 (import
    :std/pregexp :std/net/smtp :std/net/httpd/mux :std/net/httpd :std/net/uri
    :std/contract :std/text/json :std/misc/ports :std/text/utf8
    :ecm/login/database :ecm/login/handler)
  (export #t)

  (def %reset-email-text "
    <html> <body> <h3> ECM Password Reset Request</h3>
    Hey NAME,<br>
    <br>
    Someone has requested a password reset for the user 'USER' on ECM.
    <br> <br>
    If it was not you please ignore this or report to an administrator.
    <br> <br>
    Otherwise, <a href=\"TOKEN\"> Click Here </a> to reset your password.
    <br> <br>
    Cheers,
    <br> <br>
    ECM System
    </body> </html>")

  (def (reset-email-text name user url)
    (pregexp-replace
     "NAME" (pregexp-replace
  	   "USER"
  	   (pregexp-replace "TOKEN" %reset-email-text url)
  	   user)
     name))

  (def (send-reset-email        email-address (host "ecm.maxwellclaims.net")
        (proto "https")
        (smtp-host "maxbakuntu.lan:25"))
    (def tok (create-reset-token email-address))
    (match tok 
      (#f tok)
      ([name username token]
       (let ((data [To: (string-append name " <"email-address">")
  	              From: "ECM System"
  	              Subject: "ECM Password Reset"
  		      Content-Type: "text/html"
  		      (reset-email-text
  		       name username
  		       (string-append proto "://" host "/ecm/login/reset?tok=" token))])
  	   (smtp (smtp-connect smtp-host)))
         (apply send-mail smtp "postfix@drewc.ca" email-address data)))))

  (def (reset-json-handler req res)
    (def ps (http-request-params req))
    (def args (form-url-decode ps))
    (def email (assget "email" args))
    (def tok (send-reset-email email))
    (display email)
    (http-response-write
     res 200 '(("Content-Type" . "application/json"))
     (with-output-to-string "" (cut write-json tok))))

  (def (reset-html token)
    (def str (read-file-string (static-path-expand "reset-password.html")))
    (pregexp-replace "TOKEN" str token))

  (def (reset/POST req res)
    (def bdy (http-request-body req))
    (def tbl (call-with-input-u8vector bdy read-json))
    (def tok (hash-ref tbl 'token))
    (def pw (hash-ref tbl 'pw))
    (def re (reset-password tok pw))
    (http-response-write
     res 200 '(("Content-Type" . "application/json"))
     (with-output-to-string "" (cut write-json re))))
     
    
  (def (reset-handler req res)
    (if (eq? 'POST (http-request-method req))
      (reset/POST req res)
      (let ()
        (def ps (http-request-params req))
        (def args (form-url-decode ps))
        (def tok (assget "tok" args))
        (def str (reset-html tok))
        (http-response-write
         res 200 '(("Content-Type" . "text/html")) str))))

  ;; http://localhost:8080/ecm/login/logo.jpg
  (def (logo-handler _ res)
    (http-response-file res '(("Content-Type" . "image/jpeg"))
  		      (static-path-expand "logo.jpg")))

  ;; http://localhost:8080/ecm/login/gerbil-logo.svg  
  (def (gerbil-logo-handler _ res)
    (http-response-file res '(("Content-Type" . "image/svg+xml"))
  		      (static-path-expand "gerbil-logo.svg")))


  (using (self login-mux :- static-http-mux)
   (hash-put! self.t "/ecm/login/reset.json" (cut reset-json-handler <> <>))
   (hash-put! self.t "/ecm/login/reset" (cut reset-handler <> <>))
   (hash-put! self.t "/ecm/login/logo.jpg" (cut logo-handler <> <>))
   (hash-put! self.t "/ecm/login/gerbil-logo.svg" (cut gerbil-logo-handler <> <>)))



         
         

#+end_src



* The JavaScript
:PROPERTIES:
:CUSTOM_ID: the-javascript
:END:
 
#+begin_src js :tangle ./static/login.js
  const ready = fn => document.readyState !== 'loading' ? fn() : document.addEventListener('DOMContentLoaded', fn);
   // Example POST method implementation:

  async function postDataReset(url = "", data = {}) {
      // Default options are marked with *
      const response = await fetch(url, {
  	method: "POST", // *GET, POST, PUT, DELETE, etc.
  	mode: "cors", // no-cors, *cors, same-origin
  	cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
  	//credentials: "same-origin", // include, *same-origin, omit
  	headers: {
  	    "Content-Type": "application/json",
  	    // 'Content-Type': 'application/x-www-form-urlencoded',
  	},
  	//redirect: "follow", // manual, *follow, error
  	//referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
  	body: JSON.stringify(data), // body data type must match "Content-Type" header
      });

      if (response.ok) {
  	return response.json();
      } else {
  	return {
  	    error: response.statusText,
  	    status: response.status,
  	    response: response
  	}
      }
  }

  function raiseUnknownError(obj) {
      const ue = document.getElementById("UnknownError")

      ue.hidden = false 
      document.getElementById("resetForm").hidden = true
      document.getElementById("resetSpinner").hidden = true

      if (obj) {
  	try {
  	    ue.getElementsByTagName("code")[0].innerHTML = JSON.stringify(obj)
  	} catch (e) {
  	    console.error("Error in Raise:", e)
  	}
      }
  }

  function notifySuccess() {
      document.getElementById("UnknownError").hidden = true
      document.getElementById("resetForm").hidden = true
      document.getElementById("resetSpinner").hidden = true

      document.getElementById("resetSuccess").hidden = false
  }

  function send_reset_mail() {
      const email = document.getElementById("recoverInput").value 
      return fetch(`/ecm/login/reset.json?email=${encodeURIComponent(email)}`)
  	.then(e => e.json())
  }



  function addRecoverListener() {
      const form = document.getElementById("recoverForm");
      if (!form) return;

      const spin = document.getElementById("recoverSpinner"),
  	  done = document.getElementById("recoverSuccess"),
  	  nope = document.getElementById("recoverNotFound"),
  	  ue = document.getElementById("UnknownError")

      
      form.addEventListener("submit", (e) => {
  	e.preventDefault();

  	spin.hidden = false
  	form.hidden = true
  	done.hidden = true
  	nope.hidden = true
  	
  	try {
  	    send_reset_mail().then(res => {
  		console.log("Get results", res)
  		spin.hidden = true
  		res ? done.hidden = false : nope.hidden = false 
  		
  	    }).catch(e => {
  		console.log("unknown error", e)
  		spin.hidden = true
  		ue.hidden = false
  	    })
  	    
  	} catch(e) {
  	    spin.hidden = true
  	    ue.hidden = false
              console.warn('caught', e)
  	}
           
      })
  }
  	
  ready(function() {
      addRecoverListener()
      
      const form = document.getElementById("resetForm");
      if (form) {
  	
  	console.log('reset form here')

  	
          form.addEventListener("submit", function (event) {
    	    event.preventDefault();
              const args = new FormData(form),
    		  p = args.get("p"),
    		  rp = args.get("rp"),
    		  tok = args.get('token')

              document.getElementById("Invalid").style.display =  (p !== rp) ? "block" : "none";

    	    console.log('tok', tok, p, rp); 

    	    if (p === rp) {
  		const spin = document.getElementById("resetSpinner")
  		spin.hidden=false
  		form.hidden=true
  		
  		postDataReset("#", {
  		    token: tok,
  		    pw: p
  		}).then(res => {
  		    if (res.error) {
  			raiseUnknownError(res)
  		    } else {
  			console.log("get legit object", res)
  			notifySuccess()
  			setTimeout(() => document.location.href='/', 3500)
  		    }
  		}).catch(e => {
  		    raiseUnknownError()
  		    console.error("Unknown:", e)
  		})

  		
              }   
              
          })
      }

      const failure = new URLSearchParams(window.location.search).get("_f")
      if (typeof failure == "string") {
  	document.getElementById("Invalid").style.display = "block"
      }
  })

#+end_src

