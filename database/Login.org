
* The =login.= schema
:PROPERTIES:
:CUSTOM_ID: the-login-schema
:END:

There's a bunch I placed in this schema somewhere along the way. It's
a useful "file name" I suppose.

** /Function/ =login.token_role=
:PROPERTIES:
:CUSTOM_ID: function-logintoken_role
:END:

The front end only has a token. We need to have a database role for
this token.

#+begin_src sql
    CREATE OR REPLACE FUNCTION login.token_user_id(UUID)
     RETURNS int LANGUAGE SQL STABLE AS $$
      SELECT user_id FROM login.login
      RIGHT JOIN login.active USING (id)
      WHERE id = $1 and until > now();
     $$;

    CREATE OR REPLACE FUNCTION login.token_role(UUID)
     RETURNS name LANGUAGE SQL STABLE AS $$
      SELECT user_role(login.token_user_id($1));
    $$;
      
#+end_src


#+RESULTS:
| CREATE FUNCTION |
|-----------------|
| CREATE FUNCTION |

** /Function/ =login.set_session_authorization=
:PROPERTIES:
:CUSTOM_ID: function-loginset_session_authorization
:END:

#+begin_src sql
  CREATE OR REPLACE FUNCTION login.set_session_authorization(name)
   RETURNS name LANGUAGE PLPGSQL AS $$
   BEGIN
   EXECUTE 'SET SESSION AUTHORIZATION ' || quote_literal($1);
   RETURN $1;
  END;
  $$;
#+end_src

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

** /Function/ =login.set_role=
:PROPERTIES:
:CUSTOM_ID: function-loginset_role
:END:

#+begin_src sql
  CREATE OR REPLACE FUNCTION login.set_role(name)
   RETURNS name LANGUAGE PLPGSQL AS $$
   BEGIN
   EXECUTE 'SET ROLE  ' || quote_literal($1);
   RETURN $1;
  END;
  $$;
#+end_src

#+RESULTS:
| CREATE FUNCTION |
|-----------------|
